#pragma once

#include "test.h"

/**
 *  ========================================================
 *         THIS FILE IS AUTO-GENERATED BY REFLECT.PY
 *
 *     DO NOT MODIFY THIS FILE AS IT WILL BE RE-GENERATED
 *          PRIOR TO EACH BUILD IF YOU HAVE MADE ANY
 *            MODIFICATIONS TO THE ORIGINAL HEADER.
 *  ========================================================
 */

namespace reflect {

    // Class 'Test'
    template<>
    class Class<Test> : public IClass {

    public:
        static std::unique_ptr<Class<Test>> s_instance;

        std::string GetName() const override { return "Test"; }
        std::string GetFullName() const override { return "Test"; }
        int GetTypeID() const override { return reflect::GetTypeId<Test>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Test'
    // Class 'Calyx::Base'
    template<>
    class Class<Calyx::Base> : public IClass {

    public:
        static std::unique_ptr<Class<Calyx::Base>> s_instance;

        std::string GetName() const override { return "Base"; }
        std::string GetFullName() const override { return "Calyx::Base"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Base>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Calyx::Base'
    // Class 'Calyx::Base::Inner'
    template<>
    class Class<Calyx::Base::Inner> : public IClass {

    public:
        static std::unique_ptr<Class<Calyx::Base::Inner>> s_instance;

        std::string GetName() const override { return "Inner"; }
        std::string GetFullName() const override { return "Calyx::Base::Inner"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Base::Inner>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Calyx::Base::Inner'
    // Class 'Calyx::Derived'
    template<>
    class Class<Calyx::Derived> : public IClass {

    public:
        static std::unique_ptr<Class<Calyx::Derived>> s_instance;

        std::string GetName() const override { return "Derived"; }
        std::string GetFullName() const override { return "Calyx::Derived"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Derived>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Calyx::Derived'
    // Class 'Calyx::Fields'
    template<>
    class Class<Calyx::Fields> : public IClass {

    public:
        static std::unique_ptr<Class<Calyx::Fields>> s_instance;

        std::string GetName() const override { return "Fields"; }
        std::string GetFullName() const override { return "Calyx::Fields"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Fields>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Calyx::Fields'
    // Class 'Calyx::Methods'
    template<>
    class Class<Calyx::Methods> : public IClass {

    public:
        static std::unique_ptr<Class<Calyx::Methods>> s_instance;

        std::string GetName() const override { return "Methods"; }
        std::string GetFullName() const override { return "Calyx::Methods"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Methods>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Calyx::Methods'
    template<>
    class Method<void (Calyx::Methods::*)(), &Calyx::Methods::private_void_void> : public IMethod {

    public:
        static std::unique_ptr<Method<void (Calyx::Methods::*)(), &Calyx::Methods::private_void_void>> s_instance;

        std::string GetName() const override { return "private_void_void"; }
        std::string GetFullName() const override { return "Calyx::Methods::private_void_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (Calyx::Methods::*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PRIVATE; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<void (Calyx::Methods::*)(), &Calyx::Methods::public_void_void> : public IMethod {

    public:
        static std::unique_ptr<Method<void (Calyx::Methods::*)(), &Calyx::Methods::public_void_void>> s_instance;

        std::string GetName() const override { return "public_void_void"; }
        std::string GetFullName() const override { return "Calyx::Methods::public_void_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (Calyx::Methods::*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<void (Calyx::Methods::*)(int), &Calyx::Methods::public_void_int> : public IMethod {

    public:
        static std::unique_ptr<Method<void (Calyx::Methods::*)(int), &Calyx::Methods::public_void_int>> s_instance;

        std::string GetName() const override { return "public_void_int"; }
        std::string GetFullName() const override { return "Calyx::Methods::public_void_int"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (Calyx::Methods::*)(int)>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<int (Calyx::Methods::*)(int), &Calyx::Methods::public_overload> : public IMethod {

    public:
        static std::unique_ptr<Method<int (Calyx::Methods::*)(int), &Calyx::Methods::public_overload>> s_instance;

        std::string GetName() const override { return "public_overload"; }
        std::string GetFullName() const override { return "Calyx::Methods::public_overload"; }
        int GetTypeID() const override { return reflect::GetTypeId<int (Calyx::Methods::*)(int)>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<int>(), "int" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<int (Calyx::Methods::*)(int, int), &Calyx::Methods::public_overload> : public IMethod {

    public:
        static std::unique_ptr<Method<int (Calyx::Methods::*)(int, int), &Calyx::Methods::public_overload>> s_instance;

        std::string GetName() const override { return "public_overload"; }
        std::string GetFullName() const override { return "Calyx::Methods::public_overload"; }
        int GetTypeID() const override { return reflect::GetTypeId<int (Calyx::Methods::*)(int, int)>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<int>(), "int" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<int (Calyx::Methods::*)(int, int, int), &Calyx::Methods::public_overload> : public IMethod {

    public:
        static std::unique_ptr<Method<int (Calyx::Methods::*)(int, int, int), &Calyx::Methods::public_overload>> s_instance;

        std::string GetName() const override { return "public_overload"; }
        std::string GetFullName() const override { return "Calyx::Methods::public_overload"; }
        int GetTypeID() const override { return reflect::GetTypeId<int (Calyx::Methods::*)(int, int, int)>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<int>(), "int" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<void (*)(), &Calyx::Methods::public_static_void_void> : public IMethod {

    public:
        static std::unique_ptr<Method<void (*)(), &Calyx::Methods::public_static_void_void>> s_instance;

        std::string GetName() const override { return "public_static_void_void"; }
        std::string GetFullName() const override { return "Calyx::Methods::public_static_void_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    // Class 'Calyx::StaticMethods'
    template<>
    class Class<Calyx::StaticMethods> : public IClass {

    public:
        static std::unique_ptr<Class<Calyx::StaticMethods>> s_instance;

        std::string GetName() const override { return "StaticMethods"; }
        std::string GetFullName() const override { return "Calyx::StaticMethods"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::StaticMethods>(); }

        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;

    };

    // Methods for class 'Calyx::StaticMethods'
    template<>
    class Method<void (*)(), &Calyx::StaticMethods::private_void_void> : public IMethod {

    public:
        static std::unique_ptr<Method<void (*)(), &Calyx::StaticMethods::private_void_void>> s_instance;

        std::string GetName() const override { return "private_void_void"; }
        std::string GetFullName() const override { return "Calyx::StaticMethods::private_void_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PRIVATE; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<int (*)(), &Calyx::StaticMethods::private_int_void> : public IMethod {

    public:
        static std::unique_ptr<Method<int (*)(), &Calyx::StaticMethods::private_int_void>> s_instance;

        std::string GetName() const override { return "private_int_void"; }
        std::string GetFullName() const override { return "Calyx::StaticMethods::private_int_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<int (*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<int>(), "int" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PRIVATE; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<void (*)(), &Calyx::StaticMethods::public_void_void> : public IMethod {

    public:
        static std::unique_ptr<Method<void (*)(), &Calyx::StaticMethods::public_void_void>> s_instance;

        std::string GetName() const override { return "public_void_void"; }
        std::string GetFullName() const override { return "Calyx::StaticMethods::public_void_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

    template<>
    class Method<int (*)(), &Calyx::StaticMethods::public_int_void> : public IMethod {

    public:
        static std::unique_ptr<Method<int (*)(), &Calyx::StaticMethods::public_int_void>> s_instance;

        std::string GetName() const override { return "public_int_void"; }
        std::string GetFullName() const override { return "Calyx::StaticMethods::public_int_void"; }
        int GetTypeID() const override { return reflect::GetTypeId<int (*)()>(); }

        ReturnType GetReturnType() const override { return { reflect::GetTypeId<int>(), "int" }; }
        std::vector<Parameter> GetParameterList() const override;

        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }

        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;

    };

}
