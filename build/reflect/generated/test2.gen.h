#pragma once

/**
 *  ========================================================
 *         THIS FILE IS AUTO-GENERATED BY REFLECT.PY
 * 
 *     DO NOT MODIFY THIS FILE AS IT WILL BE RE-GENERATED
 *          PRIOR TO EACH BUILD IF YOU HAVE MADE ANY 
 *            MODIFICATIONS TO THE ORIGINAL HEADER.
 *  ========================================================
 */

#include "subfolder\test2.h"

namespace reflect {

    template<>
    class Enum<Calyx::AnotherEnum> : public IEnum {
    
    private:
        static std::unordered_map<std::string, int> s_enumValues;
    
    public:
        static std::unique_ptr<Enum<Calyx::AnotherEnum>> s_instance;
    
        std::string GetName() const override { return "AnotherEnum"; }
        std::string GetFullName() const override { return "Calyx::AnotherEnum"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::AnotherEnum>(); }
        
        std::unordered_map<std::string, int> GetEnumValues() const override { return s_enumValues; }
        
        std::vector<std::string> GetStringValues() const override;
        std::vector<int> GetIntValues() const override;

        bool Translate(const std::string& value, int& out) const override;
        bool Translate(int value, std::string& out) const override;
        
    };
    
    template<>
    class Class<Calyx::Test> : public IClass {
    
    public:
        static std::unique_ptr<Class<Calyx::Test>> s_instance;
    
        std::string GetName() const override { return "Test"; }
        std::string GetFullName() const override { return "Calyx::Test"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Test>(); }
        
        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;
        
    };
    
    template<>
    class Method<void (Calyx::Test::*)(), &Calyx::Test::test> : public IMethod {
    
    public:
        static std::unique_ptr<Method<void (Calyx::Test::*)(), &Calyx::Test::test>> s_instance;
    
        std::string GetName() const override { return "test"; }
        std::string GetFullName() const override { return "Calyx::Test::test"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (Calyx::Test::*)()>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };
}