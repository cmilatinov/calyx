#pragma once

/**
 *  ========================================================
 *         THIS FILE IS AUTO-GENERATED BY REFLECT.PY
 * 
 *     DO NOT MODIFY THIS FILE AS IT WILL BE RE-GENERATED
 *          PRIOR TO EACH BUILD IF YOU HAVE MADE ANY 
 *            MODIFICATIONS TO THE ORIGINAL HEADER.
 *  ========================================================
 */

#include "display\Window.h"

namespace reflect {

    template<>
    class Enum<Calyx::CursorMode> : public IEnum {
    
    private:
        static std::unordered_map<std::string, int> s_enumValues;
    
    public:
        static std::unique_ptr<Enum<Calyx::CursorMode>> s_instance;
    
        std::string GetName() const override { return "CursorMode"; }
        std::string GetFullName() const override { return "Calyx::CursorMode"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::CursorMode>(); }
        
        std::unordered_map<std::string, int> GetEnumValues() const override { return s_enumValues; }
        
        std::vector<std::string> GetStringValues() const override;
        std::vector<int> GetIntValues() const override;

        bool Translate(const std::string& value, int& out) const override;
        bool Translate(int value, std::string& out) const override;
        
    };
    
    template<>
    class Class<Calyx::WindowMode> : public IClass {
    
    public:
        static std::unique_ptr<Class<Calyx::WindowMode>> s_instance;
    
        std::string GetName() const override { return "WindowMode"; }
        std::string GetFullName() const override { return "Calyx::WindowMode"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::WindowMode>(); }
        
        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;
        
    };
    
    template<>
    class Class<Calyx::Window> : public IClass {
    
    public:
        static std::unique_ptr<Class<Calyx::Window>> s_instance;
    
        std::string GetName() const override { return "Window"; }
        std::string GetFullName() const override { return "Calyx::Window"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Window>(); }
        
        std::vector<Field> GetFields() const override;
        std::vector<IMethod*> GetMethods() const override;
        
    };
    
    template<>
    class Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate> : public IMethod {
    
    public:
        static std::unique_ptr<Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>> s_instance;
    
        std::string GetName() const override { return "OnUpdate"; }
        std::string GetFullName() const override { return "Calyx::Window::OnUpdate"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (Calyx::Window::*)()>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter> : public IMethod {
    
    public:
        static std::unique_ptr<Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>> s_instance;
    
        std::string GetName() const override { return "GetCenter"; }
        std::string GetFullName() const override { return "Calyx::Window::GetCenter"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::uvec2 (Calyx::Window::*)() const>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<Calyx::uvec2>(), "Calyx::uvec2" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize> : public IMethod {
    
    public:
        static std::unique_ptr<Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>> s_instance;
    
        std::string GetName() const override { return "GetSize"; }
        std::string GetFullName() const override { return "Calyx::Window::GetSize"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::uvec2 (Calyx::Window::*)() const>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<Calyx::uvec2>(), "Calyx::uvec2" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth> : public IMethod {
    
    public:
        static std::unique_ptr<Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>> s_instance;
    
        std::string GetName() const override { return "GetWidth"; }
        std::string GetFullName() const override { return "Calyx::Window::GetWidth"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::uint32 (Calyx::Window::*)() const>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<Calyx::uint32>(), "Calyx::uint32" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight> : public IMethod {
    
    public:
        static std::unique_ptr<Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>> s_instance;
    
        std::string GetName() const override { return "GetHeight"; }
        std::string GetFullName() const override { return "Calyx::Window::GetHeight"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::uint32 (Calyx::Window::*)() const>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<Calyx::uint32>(), "Calyx::uint32" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow> : public IMethod {
    
    public:
        static std::unique_ptr<Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>> s_instance;
    
        std::string GetName() const override { return "GetNativeWindow"; }
        std::string GetFullName() const override { return "Calyx::Window::GetNativeWindow"; }
        int GetTypeID() const override { return reflect::GetTypeId<void *(Calyx::Window::*)() const>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void *>(), "void *" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback> : public IMethod {
    
    public:
        static std::unique_ptr<Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>> s_instance;
    
        std::string GetName() const override { return "SetEventCallback"; }
        std::string GetFullName() const override { return "Calyx::Window::SetEventCallback"; }
        int GetTypeID() const override { return reflect::GetTypeId<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &)>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<void>(), "void" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::INSTANCE; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create> : public IMethod {
    
    public:
        static std::unique_ptr<Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>> s_instance;
    
        std::string GetName() const override { return "Create"; }
        std::string GetFullName() const override { return "Calyx::Window::Create"; }
        int GetTypeID() const override { return reflect::GetTypeId<Calyx::Window *(*)(const Calyx::WindowMode &)>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<Calyx::Window *>(), "Calyx::Window *" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };

    template<>
    class Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow> : public IMethod {
    
    public:
        static std::unique_ptr<Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>> s_instance;
    
        std::string GetName() const override { return "GetMainWindow"; }
        std::string GetFullName() const override { return "Calyx::Window::GetMainWindow"; }
        int GetTypeID() const override { return reflect::GetTypeId<const Calyx::Window &(*)()>(); }
        
        ReturnType GetReturnType() const override { return { reflect::GetTypeId<const Calyx::Window &>(), "const Calyx::Window &" }; }
        std::vector<Parameter> GetParameterList() const override;
        
        AccessSpecifier GetAccessSpecifier() const override { return AccessSpecifier::PUBLIC; }
        StorageType GetStorageType() const override { return StorageType::STATIC; }
        
        Object Invoke(const std::vector<Object>& args) const override;
        Object Invoke(const Reference& o, const std::vector<Object>& args) const override;
        
    };
}