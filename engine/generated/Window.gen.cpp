
/**
 *  ========================================================
 *         THIS FILE IS AUTO-GENERATED BY REFLECT.PY
 * 
 *     DO NOT MODIFY THIS FILE AS IT WILL BE RE-GENERATED
 *          PRIOR TO EACH BUILD IF YOU HAVE MADE ANY 
 *            MODIFICATIONS TO THE ORIGINAL HEADER.
 *  ========================================================
 */          
            
#include "Window.gen.h"

namespace reflect {

    std::unique_ptr<Enum<Calyx::CursorMode>> Enum<Calyx::CursorMode>::s_instance = std::make_unique<Enum<Calyx::CursorMode>>();
    
    std::unordered_map<std::string, int> Enum<Calyx::CursorMode>::s_enumValues = { 
        { "NORMAL", 0 },
        { "HIDDEN", 1 },
        { "DISABLED", 2 } 
    };
    
    std::vector<std::string> Enum<Calyx::CursorMode>::GetStringValues() const {
        return { 
            "NORMAL",
            "HIDDEN",
            "DISABLED"
        };
    }
    
    std::vector<int> Enum<Calyx::CursorMode>::GetIntValues() const {
        return { 
            0,
            1,
            2 
        };
    }

    bool Enum<Calyx::CursorMode>::Translate(const std::string& value, int& out) const {
        for (auto& it : s_enumValues) {
            if (it.first == value) {
                out = it.second;
                return true;
            }
        }
        return false;
    }
    
    bool Enum<Calyx::CursorMode>::Translate(int value, std::string& out) const {
       for (auto& it : s_enumValues) {
            if (it.second == value) {
                out = it.first;
                return true;
            }
        }
        return false;
    }
    
    std::unique_ptr<Class<Calyx::WindowMode>> Class<Calyx::WindowMode>::s_instance = std::make_unique<Class<Calyx::WindowMode>>();
    
    std::vector<Field> Class<Calyx::WindowMode>::GetFields() const {
        return {
            {
                (size_t)&Calyx::WindowMode::FULLSCREEN,
                AccessSpecifier::PUBLIC, 
                StorageType::STATIC, 
                reflect::GetTypeId<const Calyx::WindowMode>(),
                "const Calyx::WindowMode", 
                "FULLSCREEN",
                {
                    
                }
            },
            {
                (size_t)&Calyx::WindowMode::BORDERLESS_FULLSCREEN,
                AccessSpecifier::PUBLIC, 
                StorageType::STATIC, 
                reflect::GetTypeId<const Calyx::WindowMode>(),
                "const Calyx::WindowMode", 
                "BORDERLESS_FULLSCREEN",
                {
                    
                }
            },
            {
                (size_t)&Calyx::WindowMode::DEFAULT,
                AccessSpecifier::PUBLIC, 
                StorageType::STATIC, 
                reflect::GetTypeId<const Calyx::WindowMode>(),
                "const Calyx::WindowMode", 
                "DEFAULT",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, x),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<Calyx::int32>(),
                "Calyx::int32", 
                "x",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, y),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<Calyx::int32>(),
                "Calyx::int32", 
                "y",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, width),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<Calyx::int32>(),
                "Calyx::int32", 
                "width",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, height),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<Calyx::int32>(),
                "Calyx::int32", 
                "height",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, cursorMode),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<Calyx::CursorMode>(),
                "Calyx::CursorMode", 
                "cursorMode",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, decorated),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<bool>(),
                "bool", 
                "decorated",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, resizable),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<bool>(),
                "bool", 
                "resizable",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, vsync),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<bool>(),
                "bool", 
                "vsync",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, alwaysOnTop),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<bool>(),
                "bool", 
                "alwaysOnTop",
                {
                    
                }
            },
            {
                offsetof(Calyx::WindowMode, fullscreen),
                AccessSpecifier::PUBLIC, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<bool>(),
                "bool", 
                "fullscreen",
                {
                    
                }
            },
        };
    }
    
    std::vector<IMethod*> Class<Calyx::WindowMode>::GetMethods() const {
        return {
            
        };
    }
    
    
    
    std::unique_ptr<Class<Calyx::Window>> Class<Calyx::Window>::s_instance = std::make_unique<Class<Calyx::Window>>();
    
    std::vector<Field> Class<Calyx::Window>::GetFields() const {
        return {
            {
                offsetof(Calyx::Window, m_eventCallback),
                AccessSpecifier::PROTECTED, 
                StorageType::INSTANCE, 
                reflect::GetTypeId<Calyx::Window::EventCallbackFn>(),
                "Calyx::Window::EventCallbackFn", 
                "m_eventCallback",
                {
                    
                }
            },
            {
                (size_t)&Calyx::Window::s_mainWindow,
                AccessSpecifier::PROTECTED, 
                StorageType::STATIC, 
                reflect::GetTypeId<Calyx::Window *>(),
                "Calyx::Window *", 
                "s_mainWindow",
                {
                    
                }
            },
        };
    }
    
    std::vector<IMethod*> Class<Calyx::Window>::GetMethods() const {
        return {
            Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>::s_instance.get(),
            Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>::s_instance.get(),
            Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>::s_instance.get(),
            Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>::s_instance.get(),
            Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>::s_instance.get(),
            Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>::s_instance.get(),
            Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>::s_instance.get(),
            Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>::s_instance.get(),
            Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>::s_instance.get(),
        };
    }
    
    
    std::unique_ptr<Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>> Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>::s_instance = std::make_unique<Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>>();
    
    std::vector<Parameter> Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<void (Calyx::Window::*)(), &Calyx::Window::OnUpdate>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        o.GetT<Calyx::Window>().OnUpdate();
        return Object();
    }

    std::unique_ptr<Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>> Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>::s_instance = std::make_unique<Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>>();
    
    std::vector<Parameter> Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetCenter>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(o.GetT<Calyx::Window>().GetCenter());
    }

    std::unique_ptr<Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>> Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>::s_instance = std::make_unique<Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>>();
    
    std::vector<Parameter> Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<Calyx::uvec2 (Calyx::Window::*)() const, &Calyx::Window::GetSize>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(o.GetT<Calyx::Window>().GetSize());
    }

    std::unique_ptr<Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>> Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>::s_instance = std::make_unique<Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>>();
    
    std::vector<Parameter> Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetWidth>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(o.GetT<Calyx::Window>().GetWidth());
    }

    std::unique_ptr<Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>> Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>::s_instance = std::make_unique<Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>>();
    
    std::vector<Parameter> Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<Calyx::uint32 (Calyx::Window::*)() const, &Calyx::Window::GetHeight>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(o.GetT<Calyx::Window>().GetHeight());
    }

    std::unique_ptr<Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>> Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>::s_instance = std::make_unique<Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>>();
    
    std::vector<Parameter> Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<void *(Calyx::Window::*)() const, &Calyx::Window::GetNativeWindow>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(o.GetT<Calyx::Window>().GetNativeWindow());
    }

    std::unique_ptr<Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>> Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>::s_instance = std::make_unique<Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>>();
    
    std::vector<Parameter> Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>::GetParameterList() const {
        return {
            { reflect::GetTypeId<const Calyx::Window::EventCallbackFn &>(), "const Calyx::Window::EventCallbackFn &", "callback" },          
        };
    }
    
    Object Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>::Invoke(const std::vector<Object>& args) const {
        throw Exception("Instance method cannot be invoked statically!");
    }
    
    Object Method<void (Calyx::Window::*)(const Calyx::Window::EventCallbackFn &), &Calyx::Window::SetEventCallback>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        o.GetT<Calyx::Window>().SetEventCallback(args[0].GetT<std::decay_t<const Calyx::Window::EventCallbackFn &>>());
        return Object();
    }

    std::unique_ptr<Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>> Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>::s_instance = std::make_unique<Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>>();
    
    std::vector<Parameter> Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>::GetParameterList() const {
        return {
            { reflect::GetTypeId<const Calyx::WindowMode &>(), "const Calyx::WindowMode &", "mode" },          
        };
    }
    
    Object Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>::Invoke(const std::vector<Object>& args) const { 
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(Calyx::Window::Create(args[0].GetT<std::decay_t<const Calyx::WindowMode &>>()));
    }
    
    Object Method<Calyx::Window *(*)(const Calyx::WindowMode &), &Calyx::Window::Create>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        throw Exception("Static method cannot be invoked on an instance!");
    }

    std::unique_ptr<Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>> Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>::s_instance = std::make_unique<Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>>();
    
    std::vector<Parameter> Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>::GetParameterList() const {
        return {
          
        };
    }
    
    Object Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>::Invoke(const std::vector<Object>& args) const { 
        auto params = GetParameterList();
        if (params.size() != args.size())
            throw Exception("Argument count does not match!");
            
        for (int i = 0; i < params.size(); i++) {
            if (params[i].typeID != args[i].GetTypeID())
                throw Exception("Arguments type mismatch!");
        }
        
        
        return Object(Calyx::Window::GetMainWindow());
    }
    
    Object Method<const Calyx::Window &(*)(), &Calyx::Window::GetMainWindow>::Invoke(const Reference& o, const std::vector<Object>& args) const {
        throw Exception("Static method cannot be invoked on an instance!");
    }

    
}